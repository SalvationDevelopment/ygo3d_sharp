// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Protos {

  /// <summary>Holder for reflection information generated from protos.proto</summary>
  public static partial class ProtosReflection {

    #region Descriptor
    /// <summary>File descriptor for protos.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ProtosReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgxwcm90b3MucHJvdG8SBnByb3RvcyIhCgNCb3gSDAoEVHlwZRgBIAEoCRIM",
            "CgREYXRhGAIgASgMIukDCgZDb21tb24avAEKClJvb21PcHRpb24SDAoETmFt",
            "ZRgBIAEoCRIQCghQYXNzd29yZBgCIAEoCRIKCgJMcBgDIAEoDRIRCglIYW5k",
            "Q291bnQYBCABKA0SEQoJRHJhd0NvdW50GAUgASgNEiUKBE1vZGUYBiABKA4y",
            "Fy5wcm90b3MuQ29tbW9uLlJvb21Nb2RlEiUKBFJ1bGUYByABKA4yFy5wcm90",
            "b3MuQ29tbW9uLlJvb21SdWxlEg4KBkxGTGlzdBgIIAEoDRqJAQoEUm9vbRIK",
            "CgJJZBgBIAEoBBIpCgZPcHRpb24YAiABKAsyGS5wcm90b3MuQ29tbW9uLlJv",
            "b21PcHRpb24SDwoHUGxheWVycxgDIAMoCRIQCghWaXNpdG9ycxgEIAMoCRIn",
            "CgVTdGF0ZRgFIAEoDjIYLnByb3Rvcy5Db21tb24uUm9vbVN0YXRlIioKCFJv",
            "b21Nb2RlEgoKBlNpbmdsZRAAEgkKBU1hdGNoEAESBwoDVGFnEAIiKAoIUm9v",
            "bVJ1bGUSBwoDT2NnEAASBwoDVGNnEAESCgoGT2NnVGNnEAIiPgoJUm9vbVN0",
            "YXRlEggKBEluaXQQABIJCgVSZWFkeRABEhIKDlJlYWR5Q29tcGxldGVkEAIS",
            "CAoERHVlbBADItQBCgRBdXRoGjAKC0F1dGhSZXF1ZXN0Eg8KB0FjY291bnQY",
            "ASABKAkSEAoIUGFzc3dvcmQYAiABKAwaLwoMQXV0aFJlc3BvbnNlEg8KB1N1",
            "Y2Nlc3MYASABKAgSDgoGUmVhc29uGAIgASgJGjQKD1JlZ2lzdGVyUmVxdWVz",
            "dBIPCgdBY2NvdW50GAEgASgJEhAKCFBhc3N3b3JkGAIgASgMGjMKEFJlZ2lz",
            "dGVyUmVzcG9uc2USDwoHU3VjY2VzcxgBIAEoCBIOCgZSZWFzb24YAiABKAki",
            "UAoEQ2hhdBoeCgtIYWxsUmVxdWVzdBIPCgdDb250ZW50GAEgASgJGigKBEhh",
            "bGwSDwoHQWNjb3VudBgBIAEoCRIPCgdDb250ZW50GAIgASgJIsACCgRIYWxs",
            "Gj4KEUNyZWF0ZVJvb21SZXF1ZXN0EikKBk9wdGlvbhgBIAEoCzIZLnByb3Rv",
            "cy5Db21tb24uUm9vbU9wdGlvbhowChBFbnRlclJvb21SZXF1ZXN0EgoKAklk",
            "GAEgASgEEhAKCFBhc3N3b3JkGAIgASgJGgoKCFlvdUVudGVyGgoKCFlvdUxl",
            "YXZlGi0KCFJvb21MaXN0EiEKBExpc3QYASADKAsyEy5wcm90b3MuQ29tbW9u",
            "LlJvb20aMAoLUm9vbUNyZWF0ZWQSIQoEUm9vbRgBIAEoCzITLnByb3Rvcy5D",
            "b21tb24uUm9vbRoWCghSb29tRGVhZBIKCgJJZBgBIAEoBBo1ChBSb29tU3Rh",
            "dGVDaGFuZ2VkEiEKBFJvb20YASABKAsyEy5wcm90b3MuQ29tbW9uLlJvb20i",
            "JAoERHVlbBocCgxEYXRhVHJhbnNmZXISDAoERGF0YRgBIAEoDCIGCgROdWxs",
            "IqgFCghJbnRlcm5hbBqMAgoGR2xvYmFsGkYKBkxvY2tlchodCg5BY3F1aXJl",
            "UmVxdWVzdBILCgNLZXkYASABKAkaHQoOUmVsZWFzZVJlcXVlc3QSCwoDS2V5",
            "GAEgASgJGpwBCgtPbmxpbmVTdGF0ZRofCgxRdWVyeVJlcXVlc3QSDwoHQWNj",
            "b3VudBgBIAEoCRo+Cg1RdWVyeVJlc3BvbnNlEg0KBVN0YXRlGAEgASgIEg0K",
            "BVdoZXJlGAIgASgJEg8KB1Nlc3Npb24YAyABKAQaLAoKU2V0UmVxdWVzdBIP",
            "CgdBY2NvdW50GAEgASgJEg0KBVN0YXRlGAIgASgIGhsKCFJlc3BvbnNlEg8K",
            "B1N1Y2Nlc3MYASABKAgacAoIR2FtZUdhdGUaIAoQRW50cnlEYXRhUmVxdWVz",
            "dBIMCgREYXRhGAEgASgMGiIKElBhc3NUaHJvdWdoUmVxdWVzdBIMCgREYXRh",
            "GAEgASgMGh4KC0tpY2tSZXF1ZXN0Eg8KB1Nlc3Npb24YASABKAQauwEKBEhh",
            "bGwaHwoMRW50ZXJSZXF1ZXN0Eg8KB0FjY291bnQYASABKAkaIAoNTGVhdmVS",
            "ZXNwb25zZRIPCgdTdWNjZXNzGAEgASgIGj4KEUNyZWF0ZVJvb21SZXF1ZXN0",
            "EikKBk9wdGlvbhgBIAEoCzIZLnByb3Rvcy5Db21tb24uUm9vbU9wdGlvbhow",
            "ChBFbnRlclJvb21SZXF1ZXN0EgoKAklkGAEgASgEEhAKCFBhc3N3b3JkGAIg",
            "ASgJGiQKBER1ZWwaHAoMRGF0YVRyYW5zZmVyEgwKBERhdGEYASABKAwaNwoE",
            "Q2hhdBovCgtIYWxsUmVxdWVzdBIPCgdBY2NvdW50GAEgASgJEg8KB0NvbnRl",
            "bnQYAiABKAkyiQIKD0dhbWVHYXRlU2VydmljZRJFCglFbnRyeURhdGESKi5w",
            "cm90b3MuSW50ZXJuYWwuR2FtZUdhdGUuRW50cnlEYXRhUmVxdWVzdBoMLnBy",
            "b3Rvcy5OdWxsEkkKC1Bhc3NUaHJvdWdoEiwucHJvdG9zLkludGVybmFsLkdh",
            "bWVHYXRlLlBhc3NUaHJvdWdoUmVxdWVzdBoMLnByb3Rvcy5OdWxsEjsKBEtp",
            "Y2sSJS5wcm90b3MuSW50ZXJuYWwuR2FtZUdhdGUuS2lja1JlcXVlc3QaDC5w",
            "cm90b3MuTnVsbBInCglNeU9mZmxpbmUSDC5wcm90b3MuTnVsbBoMLnByb3Rv",
            "cy5OdWxsMpMBCgtBdXRoU2VydmljZRI7CgRBdXRoEhgucHJvdG9zLkF1dGgu",
            "QXV0aFJlcXVlc3QaGS5wcm90b3MuQXV0aC5BdXRoUmVzcG9uc2USRwoIUmVn",
            "aXN0ZXISHC5wcm90b3MuQXV0aC5SZWdpc3RlclJlcXVlc3QaHS5wcm90b3Mu",
            "QXV0aC5SZWdpc3RlclJlc3BvbnNlMs0BChNHbG9iYWxMb2NrZXJTZXJ2aWNl",
            "EloKB0FjcXVpcmUSLS5wcm90b3MuSW50ZXJuYWwuR2xvYmFsLkxvY2tlci5B",
            "Y3F1aXJlUmVxdWVzdBogLnByb3Rvcy5JbnRlcm5hbC5HbG9iYWwuUmVzcG9u",
            "c2USWgoHUmVsZWFzZRItLnByb3Rvcy5JbnRlcm5hbC5HbG9iYWwuTG9ja2Vy",
            "LlJlbGVhc2VSZXF1ZXN0GiAucHJvdG9zLkludGVybmFsLkdsb2JhbC5SZXNw",
            "b25zZTLhAQoYR2xvYmFsT25saW5lU3RhdGVTZXJ2aWNlEmwKBVF1ZXJ5EjAu",
            "cHJvdG9zLkludGVybmFsLkdsb2JhbC5PbmxpbmVTdGF0ZS5RdWVyeVJlcXVl",
            "c3QaMS5wcm90b3MuSW50ZXJuYWwuR2xvYmFsLk9ubGluZVN0YXRlLlF1ZXJ5",
            "UmVzcG9uc2USVwoDU2V0Ei4ucHJvdG9zLkludGVybmFsLkdsb2JhbC5Pbmxp",
            "bmVTdGF0ZS5TZXRSZXF1ZXN0GiAucHJvdG9zLkludGVybmFsLkdsb2JhbC5S",
            "ZXNwb25zZTLOAgoLSGFsbFNlcnZpY2USOQoFRW50ZXISIi5wcm90b3MuSW50",
            "ZXJuYWwuSGFsbC5FbnRlclJlcXVlc3QaDC5wcm90b3MuTnVsbBI6CgVMZWF2",
            "ZRIMLnByb3Rvcy5OdWxsGiMucHJvdG9zLkludGVybmFsLkhhbGwuTGVhdmVS",
            "ZXNwb25zZRJDCgpDcmVhdGVSb29tEicucHJvdG9zLkludGVybmFsLkhhbGwu",
            "Q3JlYXRlUm9vbVJlcXVlc3QaDC5wcm90b3MuTnVsbBJBCglFbnRlclJvb20S",
            "Ji5wcm90b3MuSW50ZXJuYWwuSGFsbC5FbnRlclJvb21SZXF1ZXN0GgwucHJv",
            "dG9zLk51bGwSQAoMRGF0YVRyYW5zZmVyEiIucHJvdG9zLkludGVybmFsLkR1",
            "ZWwuRGF0YVRyYW5zZmVyGgwucHJvdG9zLk51bGwynAEKC0NoYXRTZXJ2aWNl",
            "EicKCUVudGVySGFsbBIMLnByb3Rvcy5OdWxsGgwucHJvdG9zLk51bGwSJwoJ",
            "TGVhdmVIYWxsEgwucHJvdG9zLk51bGwaDC5wcm90b3MuTnVsbBI7CghIYWxs",
            "Q2hhdBIhLnByb3Rvcy5JbnRlcm5hbC5DaGF0LkhhbGxSZXF1ZXN0GgwucHJv",
            "dG9zLk51bGxiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Protos.Box), global::Protos.Box.Parser, new[]{ "Type", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protos.Common), global::Protos.Common.Parser, null, null, new[]{ typeof(global::Protos.Common.Types.RoomMode), typeof(global::Protos.Common.Types.RoomRule), typeof(global::Protos.Common.Types.RoomState) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Protos.Common.Types.RoomOption), global::Protos.Common.Types.RoomOption.Parser, new[]{ "Name", "Password", "Lp", "HandCount", "DrawCount", "Mode", "Rule", "LFList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protos.Common.Types.Room), global::Protos.Common.Types.Room.Parser, new[]{ "Id", "Option", "Players", "Visitors", "State" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protos.Auth), global::Protos.Auth.Parser, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Protos.Auth.Types.AuthRequest), global::Protos.Auth.Types.AuthRequest.Parser, new[]{ "Account", "Password" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protos.Auth.Types.AuthResponse), global::Protos.Auth.Types.AuthResponse.Parser, new[]{ "Success", "Reason" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protos.Auth.Types.RegisterRequest), global::Protos.Auth.Types.RegisterRequest.Parser, new[]{ "Account", "Password" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protos.Auth.Types.RegisterResponse), global::Protos.Auth.Types.RegisterResponse.Parser, new[]{ "Success", "Reason" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protos.Chat), global::Protos.Chat.Parser, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Protos.Chat.Types.HallRequest), global::Protos.Chat.Types.HallRequest.Parser, new[]{ "Content" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protos.Chat.Types.Hall), global::Protos.Chat.Types.Hall.Parser, new[]{ "Account", "Content" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protos.Hall), global::Protos.Hall.Parser, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Protos.Hall.Types.CreateRoomRequest), global::Protos.Hall.Types.CreateRoomRequest.Parser, new[]{ "Option" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protos.Hall.Types.EnterRoomRequest), global::Protos.Hall.Types.EnterRoomRequest.Parser, new[]{ "Id", "Password" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protos.Hall.Types.YouEnter), global::Protos.Hall.Types.YouEnter.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protos.Hall.Types.YouLeave), global::Protos.Hall.Types.YouLeave.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protos.Hall.Types.RoomList), global::Protos.Hall.Types.RoomList.Parser, new[]{ "List" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protos.Hall.Types.RoomCreated), global::Protos.Hall.Types.RoomCreated.Parser, new[]{ "Room" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protos.Hall.Types.RoomDead), global::Protos.Hall.Types.RoomDead.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protos.Hall.Types.RoomStateChanged), global::Protos.Hall.Types.RoomStateChanged.Parser, new[]{ "Room" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protos.Duel), global::Protos.Duel.Parser, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Protos.Duel.Types.DataTransfer), global::Protos.Duel.Types.DataTransfer.Parser, new[]{ "Data" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protos.Null), global::Protos.Null.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protos.Internal), global::Protos.Internal.Parser, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Protos.Internal.Types.Global), global::Protos.Internal.Types.Global.Parser, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Protos.Internal.Types.Global.Types.Locker), global::Protos.Internal.Types.Global.Types.Locker.Parser, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Protos.Internal.Types.Global.Types.Locker.Types.AcquireRequest), global::Protos.Internal.Types.Global.Types.Locker.Types.AcquireRequest.Parser, new[]{ "Key" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protos.Internal.Types.Global.Types.Locker.Types.ReleaseRequest), global::Protos.Internal.Types.Global.Types.Locker.Types.ReleaseRequest.Parser, new[]{ "Key" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protos.Internal.Types.Global.Types.OnlineState), global::Protos.Internal.Types.Global.Types.OnlineState.Parser, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Protos.Internal.Types.Global.Types.OnlineState.Types.QueryRequest), global::Protos.Internal.Types.Global.Types.OnlineState.Types.QueryRequest.Parser, new[]{ "Account" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protos.Internal.Types.Global.Types.OnlineState.Types.QueryResponse), global::Protos.Internal.Types.Global.Types.OnlineState.Types.QueryResponse.Parser, new[]{ "State", "Where", "Session" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protos.Internal.Types.Global.Types.OnlineState.Types.SetRequest), global::Protos.Internal.Types.Global.Types.OnlineState.Types.SetRequest.Parser, new[]{ "Account", "State" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protos.Internal.Types.Global.Types.Response), global::Protos.Internal.Types.Global.Types.Response.Parser, new[]{ "Success" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protos.Internal.Types.GameGate), global::Protos.Internal.Types.GameGate.Parser, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Protos.Internal.Types.GameGate.Types.EntryDataRequest), global::Protos.Internal.Types.GameGate.Types.EntryDataRequest.Parser, new[]{ "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protos.Internal.Types.GameGate.Types.PassThroughRequest), global::Protos.Internal.Types.GameGate.Types.PassThroughRequest.Parser, new[]{ "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protos.Internal.Types.GameGate.Types.KickRequest), global::Protos.Internal.Types.GameGate.Types.KickRequest.Parser, new[]{ "Session" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protos.Internal.Types.Hall), global::Protos.Internal.Types.Hall.Parser, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Protos.Internal.Types.Hall.Types.EnterRequest), global::Protos.Internal.Types.Hall.Types.EnterRequest.Parser, new[]{ "Account" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protos.Internal.Types.Hall.Types.LeaveResponse), global::Protos.Internal.Types.Hall.Types.LeaveResponse.Parser, new[]{ "Success" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protos.Internal.Types.Hall.Types.CreateRoomRequest), global::Protos.Internal.Types.Hall.Types.CreateRoomRequest.Parser, new[]{ "Option" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protos.Internal.Types.Hall.Types.EnterRoomRequest), global::Protos.Internal.Types.Hall.Types.EnterRoomRequest.Parser, new[]{ "Id", "Password" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protos.Internal.Types.Duel), global::Protos.Internal.Types.Duel.Parser, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Protos.Internal.Types.Duel.Types.DataTransfer), global::Protos.Internal.Types.Duel.Types.DataTransfer.Parser, new[]{ "Data" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protos.Internal.Types.Chat), global::Protos.Internal.Types.Chat.Parser, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Protos.Internal.Types.Chat.Types.HallRequest), global::Protos.Internal.Types.Chat.Types.HallRequest.Parser, new[]{ "Account", "Content" }, null, null, null)})})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///  消息装箱
  /// </summary>
  public sealed partial class Box : pb::IMessage<Box> {
    private static readonly pb::MessageParser<Box> _parser = new pb::MessageParser<Box>(() => new Box());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Box> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protos.ProtosReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Box() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Box(Box other) : this() {
      type_ = other.type_;
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Box Clone() {
      return new Box(this);
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 1;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Data" field.</summary>
    public const int DataFieldNumber = 2;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Box);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Box other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Box other) {
      if (other == null) {
        return;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  公用数据
  /// </summary>
  public sealed partial class Common : pb::IMessage<Common> {
    private static readonly pb::MessageParser<Common> _parser = new pb::MessageParser<Common>(() => new Common());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Common> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protos.ProtosReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Common() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Common(Common other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Common Clone() {
      return new Common(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Common);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Common other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Common other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Common message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///  房间模式
      /// </summary>
      public enum RoomMode {
        /// <summary>
        ///  单局
        /// </summary>
        [pbr::OriginalName("Single")] Single = 0,
        /// <summary>
        ///  比赛
        /// </summary>
        [pbr::OriginalName("Match")] Match = 1,
        /// <summary>
        ///  2v2
        /// </summary>
        [pbr::OriginalName("Tag")] Tag = 2,
      }

      /// <summary>
      ///  房间规则
      /// </summary>
      public enum RoomRule {
        /// <summary>
        ///  OCG模式
        /// </summary>
        [pbr::OriginalName("Ocg")] Ocg = 0,
        /// <summary>
        ///  TCG模式
        /// </summary>
        [pbr::OriginalName("Tcg")] Tcg = 1,
        /// <summary>
        ///  混合模式
        /// </summary>
        [pbr::OriginalName("OcgTcg")] OcgTcg = 2,
      }

      /// <summary>
      ///  房间状态
      /// </summary>
      public enum RoomState {
        /// <summary>
        ///  初始化中
        /// </summary>
        [pbr::OriginalName("Init")] Init = 0,
        /// <summary>
        ///  准备中
        /// </summary>
        [pbr::OriginalName("Ready")] Ready = 1,
        /// <summary>
        ///  准备完成
        /// </summary>
        [pbr::OriginalName("ReadyCompleted")] ReadyCompleted = 2,
        /// <summary>
        ///  对战中
        /// </summary>
        [pbr::OriginalName("Duel")] Duel = 3,
      }

      /// <summary>
      ///  房间选项
      /// </summary>
      public sealed partial class RoomOption : pb::IMessage<RoomOption> {
        private static readonly pb::MessageParser<RoomOption> _parser = new pb::MessageParser<RoomOption>(() => new RoomOption());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RoomOption> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Protos.Common.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RoomOption() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RoomOption(RoomOption other) : this() {
          name_ = other.name_;
          password_ = other.password_;
          lp_ = other.lp_;
          handCount_ = other.handCount_;
          drawCount_ = other.drawCount_;
          mode_ = other.mode_;
          rule_ = other.rule_;
          lFList_ = other.lFList_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RoomOption Clone() {
          return new RoomOption(this);
        }

        /// <summary>Field number for the "Name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "Password" field.</summary>
        public const int PasswordFieldNumber = 2;
        private string password_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Password {
          get { return password_; }
          set {
            password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "Lp" field.</summary>
        public const int LpFieldNumber = 3;
        private uint lp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Lp {
          get { return lp_; }
          set {
            lp_ = value;
          }
        }

        /// <summary>Field number for the "HandCount" field.</summary>
        public const int HandCountFieldNumber = 4;
        private uint handCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint HandCount {
          get { return handCount_; }
          set {
            handCount_ = value;
          }
        }

        /// <summary>Field number for the "DrawCount" field.</summary>
        public const int DrawCountFieldNumber = 5;
        private uint drawCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint DrawCount {
          get { return drawCount_; }
          set {
            drawCount_ = value;
          }
        }

        /// <summary>Field number for the "Mode" field.</summary>
        public const int ModeFieldNumber = 6;
        private global::Protos.Common.Types.RoomMode mode_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Protos.Common.Types.RoomMode Mode {
          get { return mode_; }
          set {
            mode_ = value;
          }
        }

        /// <summary>Field number for the "Rule" field.</summary>
        public const int RuleFieldNumber = 7;
        private global::Protos.Common.Types.RoomRule rule_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Protos.Common.Types.RoomRule Rule {
          get { return rule_; }
          set {
            rule_ = value;
          }
        }

        /// <summary>Field number for the "LFList" field.</summary>
        public const int LFListFieldNumber = 8;
        private uint lFList_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint LFList {
          get { return lFList_; }
          set {
            lFList_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RoomOption);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RoomOption other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if (Password != other.Password) return false;
          if (Lp != other.Lp) return false;
          if (HandCount != other.HandCount) return false;
          if (DrawCount != other.DrawCount) return false;
          if (Mode != other.Mode) return false;
          if (Rule != other.Rule) return false;
          if (LFList != other.LFList) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (Password.Length != 0) hash ^= Password.GetHashCode();
          if (Lp != 0) hash ^= Lp.GetHashCode();
          if (HandCount != 0) hash ^= HandCount.GetHashCode();
          if (DrawCount != 0) hash ^= DrawCount.GetHashCode();
          if (Mode != 0) hash ^= Mode.GetHashCode();
          if (Rule != 0) hash ^= Rule.GetHashCode();
          if (LFList != 0) hash ^= LFList.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (Password.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Password);
          }
          if (Lp != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Lp);
          }
          if (HandCount != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(HandCount);
          }
          if (DrawCount != 0) {
            output.WriteRawTag(40);
            output.WriteUInt32(DrawCount);
          }
          if (Mode != 0) {
            output.WriteRawTag(48);
            output.WriteEnum((int) Mode);
          }
          if (Rule != 0) {
            output.WriteRawTag(56);
            output.WriteEnum((int) Rule);
          }
          if (LFList != 0) {
            output.WriteRawTag(64);
            output.WriteUInt32(LFList);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (Password.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
          }
          if (Lp != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Lp);
          }
          if (HandCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HandCount);
          }
          if (DrawCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DrawCount);
          }
          if (Mode != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mode);
          }
          if (Rule != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Rule);
          }
          if (LFList != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LFList);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RoomOption other) {
          if (other == null) {
            return;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.Password.Length != 0) {
            Password = other.Password;
          }
          if (other.Lp != 0) {
            Lp = other.Lp;
          }
          if (other.HandCount != 0) {
            HandCount = other.HandCount;
          }
          if (other.DrawCount != 0) {
            DrawCount = other.DrawCount;
          }
          if (other.Mode != 0) {
            Mode = other.Mode;
          }
          if (other.Rule != 0) {
            Rule = other.Rule;
          }
          if (other.LFList != 0) {
            LFList = other.LFList;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 18: {
                Password = input.ReadString();
                break;
              }
              case 24: {
                Lp = input.ReadUInt32();
                break;
              }
              case 32: {
                HandCount = input.ReadUInt32();
                break;
              }
              case 40: {
                DrawCount = input.ReadUInt32();
                break;
              }
              case 48: {
                mode_ = (global::Protos.Common.Types.RoomMode) input.ReadEnum();
                break;
              }
              case 56: {
                rule_ = (global::Protos.Common.Types.RoomRule) input.ReadEnum();
                break;
              }
              case 64: {
                LFList = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      ///  房间
      /// </summary>
      public sealed partial class Room : pb::IMessage<Room> {
        private static readonly pb::MessageParser<Room> _parser = new pb::MessageParser<Room>(() => new Room());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Room> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Protos.Common.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Room() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Room(Room other) : this() {
          id_ = other.id_;
          Option = other.option_ != null ? other.Option.Clone() : null;
          players_ = other.players_.Clone();
          visitors_ = other.visitors_.Clone();
          state_ = other.state_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Room Clone() {
          return new Room(this);
        }

        /// <summary>Field number for the "Id" field.</summary>
        public const int IdFieldNumber = 1;
        private ulong id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        /// <summary>Field number for the "Option" field.</summary>
        public const int OptionFieldNumber = 2;
        private global::Protos.Common.Types.RoomOption option_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Protos.Common.Types.RoomOption Option {
          get { return option_; }
          set {
            option_ = value;
          }
        }

        /// <summary>Field number for the "Players" field.</summary>
        public const int PlayersFieldNumber = 3;
        private static readonly pb::FieldCodec<string> _repeated_players_codec
            = pb::FieldCodec.ForString(26);
        private readonly pbc::RepeatedField<string> players_ = new pbc::RepeatedField<string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> Players {
          get { return players_; }
        }

        /// <summary>Field number for the "Visitors" field.</summary>
        public const int VisitorsFieldNumber = 4;
        private static readonly pb::FieldCodec<string> _repeated_visitors_codec
            = pb::FieldCodec.ForString(34);
        private readonly pbc::RepeatedField<string> visitors_ = new pbc::RepeatedField<string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> Visitors {
          get { return visitors_; }
        }

        /// <summary>Field number for the "State" field.</summary>
        public const int StateFieldNumber = 5;
        private global::Protos.Common.Types.RoomState state_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Protos.Common.Types.RoomState State {
          get { return state_; }
          set {
            state_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Room);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Room other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (!object.Equals(Option, other.Option)) return false;
          if(!players_.Equals(other.players_)) return false;
          if(!visitors_.Equals(other.visitors_)) return false;
          if (State != other.State) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id != 0UL) hash ^= Id.GetHashCode();
          if (option_ != null) hash ^= Option.GetHashCode();
          hash ^= players_.GetHashCode();
          hash ^= visitors_.GetHashCode();
          if (State != 0) hash ^= State.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Id);
          }
          if (option_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Option);
          }
          players_.WriteTo(output, _repeated_players_codec);
          visitors_.WriteTo(output, _repeated_visitors_codec);
          if (State != 0) {
            output.WriteRawTag(40);
            output.WriteEnum((int) State);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
          }
          if (option_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Option);
          }
          size += players_.CalculateSize(_repeated_players_codec);
          size += visitors_.CalculateSize(_repeated_visitors_codec);
          if (State != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Room other) {
          if (other == null) {
            return;
          }
          if (other.Id != 0UL) {
            Id = other.Id;
          }
          if (other.option_ != null) {
            if (option_ == null) {
              option_ = new global::Protos.Common.Types.RoomOption();
            }
            Option.MergeFrom(other.Option);
          }
          players_.Add(other.players_);
          visitors_.Add(other.visitors_);
          if (other.State != 0) {
            State = other.State;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Id = input.ReadUInt64();
                break;
              }
              case 18: {
                if (option_ == null) {
                  option_ = new global::Protos.Common.Types.RoomOption();
                }
                input.ReadMessage(option_);
                break;
              }
              case 26: {
                players_.AddEntriesFrom(input, _repeated_players_codec);
                break;
              }
              case 34: {
                visitors_.AddEntriesFrom(input, _repeated_visitors_codec);
                break;
              }
              case 40: {
                state_ = (global::Protos.Common.Types.RoomState) input.ReadEnum();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///  认证，用于需要认证的网关
  /// </summary>
  public sealed partial class Auth : pb::IMessage<Auth> {
    private static readonly pb::MessageParser<Auth> _parser = new pb::MessageParser<Auth>(() => new Auth());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Auth> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protos.ProtosReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Auth() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Auth(Auth other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Auth Clone() {
      return new Auth(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Auth);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Auth other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Auth other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Auth message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///  认证
      /// </summary>
      public sealed partial class AuthRequest : pb::IMessage<AuthRequest> {
        private static readonly pb::MessageParser<AuthRequest> _parser = new pb::MessageParser<AuthRequest>(() => new AuthRequest());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AuthRequest> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Protos.Auth.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AuthRequest() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AuthRequest(AuthRequest other) : this() {
          account_ = other.account_;
          password_ = other.password_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AuthRequest Clone() {
          return new AuthRequest(this);
        }

        /// <summary>Field number for the "Account" field.</summary>
        public const int AccountFieldNumber = 1;
        private string account_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Account {
          get { return account_; }
          set {
            account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "Password" field.</summary>
        public const int PasswordFieldNumber = 2;
        private pb::ByteString password_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Password {
          get { return password_; }
          set {
            password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as AuthRequest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AuthRequest other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Account != other.Account) return false;
          if (Password != other.Password) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Account.Length != 0) hash ^= Account.GetHashCode();
          if (Password.Length != 0) hash ^= Password.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Account.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Account);
          }
          if (Password.Length != 0) {
            output.WriteRawTag(18);
            output.WriteBytes(Password);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Account.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
          }
          if (Password.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Password);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AuthRequest other) {
          if (other == null) {
            return;
          }
          if (other.Account.Length != 0) {
            Account = other.Account;
          }
          if (other.Password.Length != 0) {
            Password = other.Password;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Account = input.ReadString();
                break;
              }
              case 18: {
                Password = input.ReadBytes();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      ///  认证结果
      /// </summary>
      public sealed partial class AuthResponse : pb::IMessage<AuthResponse> {
        private static readonly pb::MessageParser<AuthResponse> _parser = new pb::MessageParser<AuthResponse>(() => new AuthResponse());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AuthResponse> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Protos.Auth.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AuthResponse() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AuthResponse(AuthResponse other) : this() {
          success_ = other.success_;
          reason_ = other.reason_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AuthResponse Clone() {
          return new AuthResponse(this);
        }

        /// <summary>Field number for the "Success" field.</summary>
        public const int SuccessFieldNumber = 1;
        private bool success_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Success {
          get { return success_; }
          set {
            success_ = value;
          }
        }

        /// <summary>Field number for the "Reason" field.</summary>
        public const int ReasonFieldNumber = 2;
        private string reason_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Reason {
          get { return reason_; }
          set {
            reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as AuthResponse);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AuthResponse other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Success != other.Success) return false;
          if (Reason != other.Reason) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Success != false) hash ^= Success.GetHashCode();
          if (Reason.Length != 0) hash ^= Reason.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Success != false) {
            output.WriteRawTag(8);
            output.WriteBool(Success);
          }
          if (Reason.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Reason);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Success != false) {
            size += 1 + 1;
          }
          if (Reason.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AuthResponse other) {
          if (other == null) {
            return;
          }
          if (other.Success != false) {
            Success = other.Success;
          }
          if (other.Reason.Length != 0) {
            Reason = other.Reason;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Success = input.ReadBool();
                break;
              }
              case 18: {
                Reason = input.ReadString();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      ///  注册
      /// </summary>
      public sealed partial class RegisterRequest : pb::IMessage<RegisterRequest> {
        private static readonly pb::MessageParser<RegisterRequest> _parser = new pb::MessageParser<RegisterRequest>(() => new RegisterRequest());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RegisterRequest> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Protos.Auth.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RegisterRequest() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RegisterRequest(RegisterRequest other) : this() {
          account_ = other.account_;
          password_ = other.password_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RegisterRequest Clone() {
          return new RegisterRequest(this);
        }

        /// <summary>Field number for the "Account" field.</summary>
        public const int AccountFieldNumber = 1;
        private string account_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Account {
          get { return account_; }
          set {
            account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "Password" field.</summary>
        public const int PasswordFieldNumber = 2;
        private pb::ByteString password_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Password {
          get { return password_; }
          set {
            password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RegisterRequest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RegisterRequest other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Account != other.Account) return false;
          if (Password != other.Password) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Account.Length != 0) hash ^= Account.GetHashCode();
          if (Password.Length != 0) hash ^= Password.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Account.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Account);
          }
          if (Password.Length != 0) {
            output.WriteRawTag(18);
            output.WriteBytes(Password);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Account.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
          }
          if (Password.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Password);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RegisterRequest other) {
          if (other == null) {
            return;
          }
          if (other.Account.Length != 0) {
            Account = other.Account;
          }
          if (other.Password.Length != 0) {
            Password = other.Password;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Account = input.ReadString();
                break;
              }
              case 18: {
                Password = input.ReadBytes();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      ///  注册结果
      /// </summary>
      public sealed partial class RegisterResponse : pb::IMessage<RegisterResponse> {
        private static readonly pb::MessageParser<RegisterResponse> _parser = new pb::MessageParser<RegisterResponse>(() => new RegisterResponse());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RegisterResponse> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Protos.Auth.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RegisterResponse() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RegisterResponse(RegisterResponse other) : this() {
          success_ = other.success_;
          reason_ = other.reason_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RegisterResponse Clone() {
          return new RegisterResponse(this);
        }

        /// <summary>Field number for the "Success" field.</summary>
        public const int SuccessFieldNumber = 1;
        private bool success_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Success {
          get { return success_; }
          set {
            success_ = value;
          }
        }

        /// <summary>Field number for the "Reason" field.</summary>
        public const int ReasonFieldNumber = 2;
        private string reason_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Reason {
          get { return reason_; }
          set {
            reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RegisterResponse);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RegisterResponse other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Success != other.Success) return false;
          if (Reason != other.Reason) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Success != false) hash ^= Success.GetHashCode();
          if (Reason.Length != 0) hash ^= Reason.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Success != false) {
            output.WriteRawTag(8);
            output.WriteBool(Success);
          }
          if (Reason.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Reason);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Success != false) {
            size += 1 + 1;
          }
          if (Reason.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RegisterResponse other) {
          if (other == null) {
            return;
          }
          if (other.Success != false) {
            Success = other.Success;
          }
          if (other.Reason.Length != 0) {
            Reason = other.Reason;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Success = input.ReadBool();
                break;
              }
              case 18: {
                Reason = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///  聊天消息
  /// </summary>
  public sealed partial class Chat : pb::IMessage<Chat> {
    private static readonly pb::MessageParser<Chat> _parser = new pb::MessageParser<Chat>(() => new Chat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Chat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protos.ProtosReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chat(Chat other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chat Clone() {
      return new Chat(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Chat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Chat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Chat other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Chat message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///  大厅聊天
      /// </summary>
      public sealed partial class HallRequest : pb::IMessage<HallRequest> {
        private static readonly pb::MessageParser<HallRequest> _parser = new pb::MessageParser<HallRequest>(() => new HallRequest());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<HallRequest> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Protos.Chat.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HallRequest() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HallRequest(HallRequest other) : this() {
          content_ = other.content_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HallRequest Clone() {
          return new HallRequest(this);
        }

        /// <summary>Field number for the "Content" field.</summary>
        public const int ContentFieldNumber = 1;
        private string content_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Content {
          get { return content_; }
          set {
            content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as HallRequest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(HallRequest other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Content != other.Content) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Content.Length != 0) hash ^= Content.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Content.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Content);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Content.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(HallRequest other) {
          if (other == null) {
            return;
          }
          if (other.Content.Length != 0) {
            Content = other.Content;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Content = input.ReadString();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      ///  大厅消息
      /// </summary>
      public sealed partial class Hall : pb::IMessage<Hall> {
        private static readonly pb::MessageParser<Hall> _parser = new pb::MessageParser<Hall>(() => new Hall());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Hall> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Protos.Chat.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Hall() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Hall(Hall other) : this() {
          account_ = other.account_;
          content_ = other.content_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Hall Clone() {
          return new Hall(this);
        }

        /// <summary>Field number for the "Account" field.</summary>
        public const int AccountFieldNumber = 1;
        private string account_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Account {
          get { return account_; }
          set {
            account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "Content" field.</summary>
        public const int ContentFieldNumber = 2;
        private string content_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Content {
          get { return content_; }
          set {
            content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Hall);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Hall other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Account != other.Account) return false;
          if (Content != other.Content) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Account.Length != 0) hash ^= Account.GetHashCode();
          if (Content.Length != 0) hash ^= Content.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Account.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Account);
          }
          if (Content.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Content);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Account.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
          }
          if (Content.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Hall other) {
          if (other == null) {
            return;
          }
          if (other.Account.Length != 0) {
            Account = other.Account;
          }
          if (other.Content.Length != 0) {
            Content = other.Content;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Account = input.ReadString();
                break;
              }
              case 18: {
                Content = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///  大厅消息
  /// </summary>
  public sealed partial class Hall : pb::IMessage<Hall> {
    private static readonly pb::MessageParser<Hall> _parser = new pb::MessageParser<Hall>(() => new Hall());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Hall> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protos.ProtosReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hall() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hall(Hall other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hall Clone() {
      return new Hall(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Hall);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Hall other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Hall other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Hall message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///  请求创建房间
      /// </summary>
      public sealed partial class CreateRoomRequest : pb::IMessage<CreateRoomRequest> {
        private static readonly pb::MessageParser<CreateRoomRequest> _parser = new pb::MessageParser<CreateRoomRequest>(() => new CreateRoomRequest());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CreateRoomRequest> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Protos.Hall.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CreateRoomRequest() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CreateRoomRequest(CreateRoomRequest other) : this() {
          Option = other.option_ != null ? other.Option.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CreateRoomRequest Clone() {
          return new CreateRoomRequest(this);
        }

        /// <summary>Field number for the "Option" field.</summary>
        public const int OptionFieldNumber = 1;
        private global::Protos.Common.Types.RoomOption option_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Protos.Common.Types.RoomOption Option {
          get { return option_; }
          set {
            option_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CreateRoomRequest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CreateRoomRequest other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Option, other.Option)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (option_ != null) hash ^= Option.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (option_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Option);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (option_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Option);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CreateRoomRequest other) {
          if (other == null) {
            return;
          }
          if (other.option_ != null) {
            if (option_ == null) {
              option_ = new global::Protos.Common.Types.RoomOption();
            }
            Option.MergeFrom(other.Option);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (option_ == null) {
                  option_ = new global::Protos.Common.Types.RoomOption();
                }
                input.ReadMessage(option_);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      ///  请求加入房间
      /// </summary>
      public sealed partial class EnterRoomRequest : pb::IMessage<EnterRoomRequest> {
        private static readonly pb::MessageParser<EnterRoomRequest> _parser = new pb::MessageParser<EnterRoomRequest>(() => new EnterRoomRequest());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<EnterRoomRequest> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Protos.Hall.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EnterRoomRequest() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EnterRoomRequest(EnterRoomRequest other) : this() {
          id_ = other.id_;
          password_ = other.password_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EnterRoomRequest Clone() {
          return new EnterRoomRequest(this);
        }

        /// <summary>Field number for the "Id" field.</summary>
        public const int IdFieldNumber = 1;
        private ulong id_;
        /// <summary>
        ///  房间ID
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        /// <summary>Field number for the "Password" field.</summary>
        public const int PasswordFieldNumber = 2;
        private string password_ = "";
        /// <summary>
        ///  密码
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Password {
          get { return password_; }
          set {
            password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as EnterRoomRequest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(EnterRoomRequest other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (Password != other.Password) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id != 0UL) hash ^= Id.GetHashCode();
          if (Password.Length != 0) hash ^= Password.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Id);
          }
          if (Password.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Password);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
          }
          if (Password.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(EnterRoomRequest other) {
          if (other == null) {
            return;
          }
          if (other.Id != 0UL) {
            Id = other.Id;
          }
          if (other.Password.Length != 0) {
            Password = other.Password;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Id = input.ReadUInt64();
                break;
              }
              case 18: {
                Password = input.ReadString();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      ///  你进入了大厅
      /// </summary>
      public sealed partial class YouEnter : pb::IMessage<YouEnter> {
        private static readonly pb::MessageParser<YouEnter> _parser = new pb::MessageParser<YouEnter>(() => new YouEnter());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<YouEnter> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Protos.Hall.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public YouEnter() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public YouEnter(YouEnter other) : this() {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public YouEnter Clone() {
          return new YouEnter(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as YouEnter);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(YouEnter other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(YouEnter other) {
          if (other == null) {
            return;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
            }
          }
        }

      }

      /// <summary>
      ///  你离开了大厅
      /// </summary>
      public sealed partial class YouLeave : pb::IMessage<YouLeave> {
        private static readonly pb::MessageParser<YouLeave> _parser = new pb::MessageParser<YouLeave>(() => new YouLeave());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<YouLeave> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Protos.Hall.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public YouLeave() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public YouLeave(YouLeave other) : this() {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public YouLeave Clone() {
          return new YouLeave(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as YouLeave);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(YouLeave other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(YouLeave other) {
          if (other == null) {
            return;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
            }
          }
        }

      }

      /// <summary>
      ///  房间列表
      /// </summary>
      public sealed partial class RoomList : pb::IMessage<RoomList> {
        private static readonly pb::MessageParser<RoomList> _parser = new pb::MessageParser<RoomList>(() => new RoomList());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RoomList> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Protos.Hall.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RoomList() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RoomList(RoomList other) : this() {
          list_ = other.list_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RoomList Clone() {
          return new RoomList(this);
        }

        /// <summary>Field number for the "List" field.</summary>
        public const int ListFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Protos.Common.Types.Room> _repeated_list_codec
            = pb::FieldCodec.ForMessage(10, global::Protos.Common.Types.Room.Parser);
        private readonly pbc::RepeatedField<global::Protos.Common.Types.Room> list_ = new pbc::RepeatedField<global::Protos.Common.Types.Room>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Protos.Common.Types.Room> List {
          get { return list_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RoomList);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RoomList other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!list_.Equals(other.list_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= list_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          list_.WriteTo(output, _repeated_list_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += list_.CalculateSize(_repeated_list_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RoomList other) {
          if (other == null) {
            return;
          }
          list_.Add(other.list_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                list_.AddEntriesFrom(input, _repeated_list_codec);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      ///  房间被创建
      /// </summary>
      public sealed partial class RoomCreated : pb::IMessage<RoomCreated> {
        private static readonly pb::MessageParser<RoomCreated> _parser = new pb::MessageParser<RoomCreated>(() => new RoomCreated());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RoomCreated> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Protos.Hall.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RoomCreated() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RoomCreated(RoomCreated other) : this() {
          Room = other.room_ != null ? other.Room.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RoomCreated Clone() {
          return new RoomCreated(this);
        }

        /// <summary>Field number for the "Room" field.</summary>
        public const int RoomFieldNumber = 1;
        private global::Protos.Common.Types.Room room_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Protos.Common.Types.Room Room {
          get { return room_; }
          set {
            room_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RoomCreated);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RoomCreated other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Room, other.Room)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (room_ != null) hash ^= Room.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (room_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Room);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (room_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Room);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RoomCreated other) {
          if (other == null) {
            return;
          }
          if (other.room_ != null) {
            if (room_ == null) {
              room_ = new global::Protos.Common.Types.Room();
            }
            Room.MergeFrom(other.Room);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (room_ == null) {
                  room_ = new global::Protos.Common.Types.Room();
                }
                input.ReadMessage(room_);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      ///  房间被销毁
      /// </summary>
      public sealed partial class RoomDead : pb::IMessage<RoomDead> {
        private static readonly pb::MessageParser<RoomDead> _parser = new pb::MessageParser<RoomDead>(() => new RoomDead());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RoomDead> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Protos.Hall.Descriptor.NestedTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RoomDead() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RoomDead(RoomDead other) : this() {
          id_ = other.id_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RoomDead Clone() {
          return new RoomDead(this);
        }

        /// <summary>Field number for the "Id" field.</summary>
        public const int IdFieldNumber = 1;
        private ulong id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RoomDead);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RoomDead other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id != 0UL) hash ^= Id.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Id);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RoomDead other) {
          if (other == null) {
            return;
          }
          if (other.Id != 0UL) {
            Id = other.Id;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Id = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      ///  房间状态改变
      /// </summary>
      public sealed partial class RoomStateChanged : pb::IMessage<RoomStateChanged> {
        private static readonly pb::MessageParser<RoomStateChanged> _parser = new pb::MessageParser<RoomStateChanged>(() => new RoomStateChanged());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RoomStateChanged> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Protos.Hall.Descriptor.NestedTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RoomStateChanged() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RoomStateChanged(RoomStateChanged other) : this() {
          Room = other.room_ != null ? other.Room.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RoomStateChanged Clone() {
          return new RoomStateChanged(this);
        }

        /// <summary>Field number for the "Room" field.</summary>
        public const int RoomFieldNumber = 1;
        private global::Protos.Common.Types.Room room_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Protos.Common.Types.Room Room {
          get { return room_; }
          set {
            room_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RoomStateChanged);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RoomStateChanged other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Room, other.Room)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (room_ != null) hash ^= Room.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (room_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Room);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (room_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Room);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RoomStateChanged other) {
          if (other == null) {
            return;
          }
          if (other.room_ != null) {
            if (room_ == null) {
              room_ = new global::Protos.Common.Types.Room();
            }
            Room.MergeFrom(other.Room);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (room_ == null) {
                  room_ = new global::Protos.Common.Types.Room();
                }
                input.ReadMessage(room_);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///  对战消息
  /// </summary>
  public sealed partial class Duel : pb::IMessage<Duel> {
    private static readonly pb::MessageParser<Duel> _parser = new pb::MessageParser<Duel>(() => new Duel());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Duel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protos.ProtosReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Duel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Duel(Duel other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Duel Clone() {
      return new Duel(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Duel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Duel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Duel other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Duel message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///  传输数据
      /// </summary>
      public sealed partial class DataTransfer : pb::IMessage<DataTransfer> {
        private static readonly pb::MessageParser<DataTransfer> _parser = new pb::MessageParser<DataTransfer>(() => new DataTransfer());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DataTransfer> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Protos.Duel.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DataTransfer() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DataTransfer(DataTransfer other) : this() {
          data_ = other.data_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DataTransfer Clone() {
          return new DataTransfer(this);
        }

        /// <summary>Field number for the "Data" field.</summary>
        public const int DataFieldNumber = 1;
        private pb::ByteString data_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Data {
          get { return data_; }
          set {
            data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as DataTransfer);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DataTransfer other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Data != other.Data) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Data.Length != 0) hash ^= Data.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Data.Length != 0) {
            output.WriteRawTag(10);
            output.WriteBytes(Data);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Data.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DataTransfer other) {
          if (other == null) {
            return;
          }
          if (other.Data.Length != 0) {
            Data = other.Data;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Data = input.ReadBytes();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class Null : pb::IMessage<Null> {
    private static readonly pb::MessageParser<Null> _parser = new pb::MessageParser<Null>(() => new Null());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Null> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protos.ProtosReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Null() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Null(Null other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Null Clone() {
      return new Null(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Null);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Null other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Null other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class Internal : pb::IMessage<Internal> {
    private static readonly pb::MessageParser<Internal> _parser = new pb::MessageParser<Internal>(() => new Internal());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Internal> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protos.ProtosReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Internal() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Internal(Internal other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Internal Clone() {
      return new Internal(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Internal);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Internal other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Internal other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Internal message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///  全局服务
      /// </summary>
      public sealed partial class Global : pb::IMessage<Global> {
        private static readonly pb::MessageParser<Global> _parser = new pb::MessageParser<Global>(() => new Global());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Global> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Protos.Internal.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Global() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Global(Global other) : this() {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Global Clone() {
          return new Global(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Global);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Global other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Global other) {
          if (other == null) {
            return;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Global message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          ///  全局锁
          /// </summary>
          public sealed partial class Locker : pb::IMessage<Locker> {
            private static readonly pb::MessageParser<Locker> _parser = new pb::MessageParser<Locker>(() => new Locker());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Locker> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Protos.Internal.Types.Global.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Locker() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Locker(Locker other) : this() {
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Locker Clone() {
              return new Locker(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Locker);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Locker other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Locker other) {
              if (other == null) {
                return;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                }
              }
            }

            #region Nested types
            /// <summary>Container for nested types declared in the Locker message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static partial class Types {
              /// <summary>
              ///  获取锁
              /// </summary>
              public sealed partial class AcquireRequest : pb::IMessage<AcquireRequest> {
                private static readonly pb::MessageParser<AcquireRequest> _parser = new pb::MessageParser<AcquireRequest>(() => new AcquireRequest());
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<AcquireRequest> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::Protos.Internal.Types.Global.Types.Locker.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public AcquireRequest() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public AcquireRequest(AcquireRequest other) : this() {
                  key_ = other.key_;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public AcquireRequest Clone() {
                  return new AcquireRequest(this);
                }

                /// <summary>Field number for the "Key" field.</summary>
                public const int KeyFieldNumber = 1;
                private string key_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Key {
                  get { return key_; }
                  set {
                    key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as AcquireRequest);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(AcquireRequest other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if (Key != other.Key) return false;
                  return true;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  if (Key.Length != 0) hash ^= Key.GetHashCode();
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                  if (Key.Length != 0) {
                    output.WriteRawTag(10);
                    output.WriteString(Key);
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  if (Key.Length != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(AcquireRequest other) {
                  if (other == null) {
                    return;
                  }
                  if (other.Key.Length != 0) {
                    Key = other.Key;
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        input.SkipLastField();
                        break;
                      case 10: {
                        Key = input.ReadString();
                        break;
                      }
                    }
                  }
                }

              }

              /// <summary>
              ///  释放锁
              /// </summary>
              public sealed partial class ReleaseRequest : pb::IMessage<ReleaseRequest> {
                private static readonly pb::MessageParser<ReleaseRequest> _parser = new pb::MessageParser<ReleaseRequest>(() => new ReleaseRequest());
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<ReleaseRequest> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::Protos.Internal.Types.Global.Types.Locker.Descriptor.NestedTypes[1]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public ReleaseRequest() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public ReleaseRequest(ReleaseRequest other) : this() {
                  key_ = other.key_;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public ReleaseRequest Clone() {
                  return new ReleaseRequest(this);
                }

                /// <summary>Field number for the "Key" field.</summary>
                public const int KeyFieldNumber = 1;
                private string key_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Key {
                  get { return key_; }
                  set {
                    key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as ReleaseRequest);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(ReleaseRequest other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if (Key != other.Key) return false;
                  return true;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  if (Key.Length != 0) hash ^= Key.GetHashCode();
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                  if (Key.Length != 0) {
                    output.WriteRawTag(10);
                    output.WriteString(Key);
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  if (Key.Length != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(ReleaseRequest other) {
                  if (other == null) {
                    return;
                  }
                  if (other.Key.Length != 0) {
                    Key = other.Key;
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        input.SkipLastField();
                        break;
                      case 10: {
                        Key = input.ReadString();
                        break;
                      }
                    }
                  }
                }

              }

            }
            #endregion

          }

          /// <summary>
          ///  在线状态
          /// </summary>
          public sealed partial class OnlineState : pb::IMessage<OnlineState> {
            private static readonly pb::MessageParser<OnlineState> _parser = new pb::MessageParser<OnlineState>(() => new OnlineState());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<OnlineState> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Protos.Internal.Types.Global.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public OnlineState() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public OnlineState(OnlineState other) : this() {
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public OnlineState Clone() {
              return new OnlineState(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as OnlineState);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(OnlineState other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(OnlineState other) {
              if (other == null) {
                return;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                }
              }
            }

            #region Nested types
            /// <summary>Container for nested types declared in the OnlineState message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static partial class Types {
              /// <summary>
              ///  查询状态
              /// </summary>
              public sealed partial class QueryRequest : pb::IMessage<QueryRequest> {
                private static readonly pb::MessageParser<QueryRequest> _parser = new pb::MessageParser<QueryRequest>(() => new QueryRequest());
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<QueryRequest> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::Protos.Internal.Types.Global.Types.OnlineState.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public QueryRequest() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public QueryRequest(QueryRequest other) : this() {
                  account_ = other.account_;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public QueryRequest Clone() {
                  return new QueryRequest(this);
                }

                /// <summary>Field number for the "Account" field.</summary>
                public const int AccountFieldNumber = 1;
                private string account_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Account {
                  get { return account_; }
                  set {
                    account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as QueryRequest);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(QueryRequest other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if (Account != other.Account) return false;
                  return true;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  if (Account.Length != 0) hash ^= Account.GetHashCode();
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                  if (Account.Length != 0) {
                    output.WriteRawTag(10);
                    output.WriteString(Account);
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  if (Account.Length != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(QueryRequest other) {
                  if (other == null) {
                    return;
                  }
                  if (other.Account.Length != 0) {
                    Account = other.Account;
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        input.SkipLastField();
                        break;
                      case 10: {
                        Account = input.ReadString();
                        break;
                      }
                    }
                  }
                }

              }

              /// <summary>
              ///  状态
              /// </summary>
              public sealed partial class QueryResponse : pb::IMessage<QueryResponse> {
                private static readonly pb::MessageParser<QueryResponse> _parser = new pb::MessageParser<QueryResponse>(() => new QueryResponse());
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<QueryResponse> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::Protos.Internal.Types.Global.Types.OnlineState.Descriptor.NestedTypes[1]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public QueryResponse() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public QueryResponse(QueryResponse other) : this() {
                  state_ = other.state_;
                  where_ = other.where_;
                  session_ = other.session_;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public QueryResponse Clone() {
                  return new QueryResponse(this);
                }

                /// <summary>Field number for the "State" field.</summary>
                public const int StateFieldNumber = 1;
                private bool state_;
                /// <summary>
                ///  状态
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool State {
                  get { return state_; }
                  set {
                    state_ = value;
                  }
                }

                /// <summary>Field number for the "Where" field.</summary>
                public const int WhereFieldNumber = 2;
                private string where_ = "";
                /// <summary>
                ///  所在网关
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Where {
                  get { return where_; }
                  set {
                    where_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                  }
                }

                /// <summary>Field number for the "Session" field.</summary>
                public const int SessionFieldNumber = 3;
                private ulong session_;
                /// <summary>
                ///  会话ID
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public ulong Session {
                  get { return session_; }
                  set {
                    session_ = value;
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as QueryResponse);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(QueryResponse other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if (State != other.State) return false;
                  if (Where != other.Where) return false;
                  if (Session != other.Session) return false;
                  return true;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  if (State != false) hash ^= State.GetHashCode();
                  if (Where.Length != 0) hash ^= Where.GetHashCode();
                  if (Session != 0UL) hash ^= Session.GetHashCode();
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                  if (State != false) {
                    output.WriteRawTag(8);
                    output.WriteBool(State);
                  }
                  if (Where.Length != 0) {
                    output.WriteRawTag(18);
                    output.WriteString(Where);
                  }
                  if (Session != 0UL) {
                    output.WriteRawTag(24);
                    output.WriteUInt64(Session);
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  if (State != false) {
                    size += 1 + 1;
                  }
                  if (Where.Length != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeStringSize(Where);
                  }
                  if (Session != 0UL) {
                    size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Session);
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(QueryResponse other) {
                  if (other == null) {
                    return;
                  }
                  if (other.State != false) {
                    State = other.State;
                  }
                  if (other.Where.Length != 0) {
                    Where = other.Where;
                  }
                  if (other.Session != 0UL) {
                    Session = other.Session;
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        input.SkipLastField();
                        break;
                      case 8: {
                        State = input.ReadBool();
                        break;
                      }
                      case 18: {
                        Where = input.ReadString();
                        break;
                      }
                      case 24: {
                        Session = input.ReadUInt64();
                        break;
                      }
                    }
                  }
                }

              }

              /// <summary>
              ///  设置在线
              /// </summary>
              public sealed partial class SetRequest : pb::IMessage<SetRequest> {
                private static readonly pb::MessageParser<SetRequest> _parser = new pb::MessageParser<SetRequest>(() => new SetRequest());
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<SetRequest> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::Protos.Internal.Types.Global.Types.OnlineState.Descriptor.NestedTypes[2]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public SetRequest() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public SetRequest(SetRequest other) : this() {
                  account_ = other.account_;
                  state_ = other.state_;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public SetRequest Clone() {
                  return new SetRequest(this);
                }

                /// <summary>Field number for the "Account" field.</summary>
                public const int AccountFieldNumber = 1;
                private string account_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Account {
                  get { return account_; }
                  set {
                    account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                  }
                }

                /// <summary>Field number for the "State" field.</summary>
                public const int StateFieldNumber = 2;
                private bool state_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool State {
                  get { return state_; }
                  set {
                    state_ = value;
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as SetRequest);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(SetRequest other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if (Account != other.Account) return false;
                  if (State != other.State) return false;
                  return true;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  if (Account.Length != 0) hash ^= Account.GetHashCode();
                  if (State != false) hash ^= State.GetHashCode();
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                  if (Account.Length != 0) {
                    output.WriteRawTag(10);
                    output.WriteString(Account);
                  }
                  if (State != false) {
                    output.WriteRawTag(16);
                    output.WriteBool(State);
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  if (Account.Length != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
                  }
                  if (State != false) {
                    size += 1 + 1;
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(SetRequest other) {
                  if (other == null) {
                    return;
                  }
                  if (other.Account.Length != 0) {
                    Account = other.Account;
                  }
                  if (other.State != false) {
                    State = other.State;
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        input.SkipLastField();
                        break;
                      case 10: {
                        Account = input.ReadString();
                        break;
                      }
                      case 16: {
                        State = input.ReadBool();
                        break;
                      }
                    }
                  }
                }

              }

            }
            #endregion

          }

          /// <summary>
          ///  响应
          /// </summary>
          public sealed partial class Response : pb::IMessage<Response> {
            private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Response> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Protos.Internal.Types.Global.Descriptor.NestedTypes[2]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Response() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Response(Response other) : this() {
              success_ = other.success_;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Response Clone() {
              return new Response(this);
            }

            /// <summary>Field number for the "Success" field.</summary>
            public const int SuccessFieldNumber = 1;
            private bool success_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Success {
              get { return success_; }
              set {
                success_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Response);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Response other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Success != other.Success) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Success != false) hash ^= Success.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Success != false) {
                output.WriteRawTag(8);
                output.WriteBool(Success);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Success != false) {
                size += 1 + 1;
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Response other) {
              if (other == null) {
                return;
              }
              if (other.Success != false) {
                Success = other.Success;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    Success = input.ReadBool();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      /// <summary>
      ///  游戏网关服务器
      /// </summary>
      public sealed partial class GameGate : pb::IMessage<GameGate> {
        private static readonly pb::MessageParser<GameGate> _parser = new pb::MessageParser<GameGate>(() => new GameGate());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GameGate> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Protos.Internal.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameGate() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameGate(GameGate other) : this() {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameGate Clone() {
          return new GameGate(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as GameGate);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GameGate other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GameGate other) {
          if (other == null) {
            return;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the GameGate message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          ///  入口数据
          /// </summary>
          public sealed partial class EntryDataRequest : pb::IMessage<EntryDataRequest> {
            private static readonly pb::MessageParser<EntryDataRequest> _parser = new pb::MessageParser<EntryDataRequest>(() => new EntryDataRequest());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<EntryDataRequest> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Protos.Internal.Types.GameGate.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public EntryDataRequest() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public EntryDataRequest(EntryDataRequest other) : this() {
              data_ = other.data_;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public EntryDataRequest Clone() {
              return new EntryDataRequest(this);
            }

            /// <summary>Field number for the "Data" field.</summary>
            public const int DataFieldNumber = 1;
            private pb::ByteString data_ = pb::ByteString.Empty;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pb::ByteString Data {
              get { return data_; }
              set {
                data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as EntryDataRequest);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(EntryDataRequest other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Data != other.Data) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Data.Length != 0) hash ^= Data.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Data.Length != 0) {
                output.WriteRawTag(10);
                output.WriteBytes(Data);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Data.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(EntryDataRequest other) {
              if (other == null) {
                return;
              }
              if (other.Data.Length != 0) {
                Data = other.Data;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 10: {
                    Data = input.ReadBytes();
                    break;
                  }
                }
              }
            }

          }

          /// <summary>
          ///  透传数据
          /// </summary>
          public sealed partial class PassThroughRequest : pb::IMessage<PassThroughRequest> {
            private static readonly pb::MessageParser<PassThroughRequest> _parser = new pb::MessageParser<PassThroughRequest>(() => new PassThroughRequest());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<PassThroughRequest> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Protos.Internal.Types.GameGate.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PassThroughRequest() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PassThroughRequest(PassThroughRequest other) : this() {
              data_ = other.data_;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PassThroughRequest Clone() {
              return new PassThroughRequest(this);
            }

            /// <summary>Field number for the "Data" field.</summary>
            public const int DataFieldNumber = 1;
            private pb::ByteString data_ = pb::ByteString.Empty;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pb::ByteString Data {
              get { return data_; }
              set {
                data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as PassThroughRequest);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(PassThroughRequest other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Data != other.Data) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Data.Length != 0) hash ^= Data.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Data.Length != 0) {
                output.WriteRawTag(10);
                output.WriteBytes(Data);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Data.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(PassThroughRequest other) {
              if (other == null) {
                return;
              }
              if (other.Data.Length != 0) {
                Data = other.Data;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 10: {
                    Data = input.ReadBytes();
                    break;
                  }
                }
              }
            }

          }

          /// <summary>
          ///  踢人
          /// </summary>
          public sealed partial class KickRequest : pb::IMessage<KickRequest> {
            private static readonly pb::MessageParser<KickRequest> _parser = new pb::MessageParser<KickRequest>(() => new KickRequest());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<KickRequest> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Protos.Internal.Types.GameGate.Descriptor.NestedTypes[2]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public KickRequest() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public KickRequest(KickRequest other) : this() {
              session_ = other.session_;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public KickRequest Clone() {
              return new KickRequest(this);
            }

            /// <summary>Field number for the "Session" field.</summary>
            public const int SessionFieldNumber = 1;
            private ulong session_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ulong Session {
              get { return session_; }
              set {
                session_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as KickRequest);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(KickRequest other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Session != other.Session) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Session != 0UL) hash ^= Session.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Session != 0UL) {
                output.WriteRawTag(8);
                output.WriteUInt64(Session);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Session != 0UL) {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Session);
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(KickRequest other) {
              if (other == null) {
                return;
              }
              if (other.Session != 0UL) {
                Session = other.Session;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    Session = input.ReadUInt64();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      /// <summary>
      ///  大厅服务器
      /// </summary>
      public sealed partial class Hall : pb::IMessage<Hall> {
        private static readonly pb::MessageParser<Hall> _parser = new pb::MessageParser<Hall>(() => new Hall());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Hall> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Protos.Internal.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Hall() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Hall(Hall other) : this() {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Hall Clone() {
          return new Hall(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Hall);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Hall other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Hall other) {
          if (other == null) {
            return;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Hall message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          ///  玩家进入
          /// </summary>
          public sealed partial class EnterRequest : pb::IMessage<EnterRequest> {
            private static readonly pb::MessageParser<EnterRequest> _parser = new pb::MessageParser<EnterRequest>(() => new EnterRequest());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<EnterRequest> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Protos.Internal.Types.Hall.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public EnterRequest() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public EnterRequest(EnterRequest other) : this() {
              account_ = other.account_;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public EnterRequest Clone() {
              return new EnterRequest(this);
            }

            /// <summary>Field number for the "Account" field.</summary>
            public const int AccountFieldNumber = 1;
            private string account_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Account {
              get { return account_; }
              set {
                account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as EnterRequest);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(EnterRequest other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Account != other.Account) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Account.Length != 0) hash ^= Account.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Account.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(Account);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Account.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(EnterRequest other) {
              if (other == null) {
                return;
              }
              if (other.Account.Length != 0) {
                Account = other.Account;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 10: {
                    Account = input.ReadString();
                    break;
                  }
                }
              }
            }

          }

          /// <summary>
          ///  玩家离开响应
          /// </summary>
          public sealed partial class LeaveResponse : pb::IMessage<LeaveResponse> {
            private static readonly pb::MessageParser<LeaveResponse> _parser = new pb::MessageParser<LeaveResponse>(() => new LeaveResponse());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<LeaveResponse> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Protos.Internal.Types.Hall.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public LeaveResponse() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public LeaveResponse(LeaveResponse other) : this() {
              success_ = other.success_;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public LeaveResponse Clone() {
              return new LeaveResponse(this);
            }

            /// <summary>Field number for the "Success" field.</summary>
            public const int SuccessFieldNumber = 1;
            private bool success_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Success {
              get { return success_; }
              set {
                success_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as LeaveResponse);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(LeaveResponse other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Success != other.Success) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Success != false) hash ^= Success.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Success != false) {
                output.WriteRawTag(8);
                output.WriteBool(Success);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Success != false) {
                size += 1 + 1;
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(LeaveResponse other) {
              if (other == null) {
                return;
              }
              if (other.Success != false) {
                Success = other.Success;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    Success = input.ReadBool();
                    break;
                  }
                }
              }
            }

          }

          /// <summary>
          ///  创建房间
          /// </summary>
          public sealed partial class CreateRoomRequest : pb::IMessage<CreateRoomRequest> {
            private static readonly pb::MessageParser<CreateRoomRequest> _parser = new pb::MessageParser<CreateRoomRequest>(() => new CreateRoomRequest());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<CreateRoomRequest> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Protos.Internal.Types.Hall.Descriptor.NestedTypes[2]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public CreateRoomRequest() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public CreateRoomRequest(CreateRoomRequest other) : this() {
              Option = other.option_ != null ? other.Option.Clone() : null;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public CreateRoomRequest Clone() {
              return new CreateRoomRequest(this);
            }

            /// <summary>Field number for the "Option" field.</summary>
            public const int OptionFieldNumber = 1;
            private global::Protos.Common.Types.RoomOption option_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Protos.Common.Types.RoomOption Option {
              get { return option_; }
              set {
                option_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as CreateRoomRequest);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(CreateRoomRequest other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!object.Equals(Option, other.Option)) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (option_ != null) hash ^= Option.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (option_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(Option);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (option_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Option);
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(CreateRoomRequest other) {
              if (other == null) {
                return;
              }
              if (other.option_ != null) {
                if (option_ == null) {
                  option_ = new global::Protos.Common.Types.RoomOption();
                }
                Option.MergeFrom(other.Option);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 10: {
                    if (option_ == null) {
                      option_ = new global::Protos.Common.Types.RoomOption();
                    }
                    input.ReadMessage(option_);
                    break;
                  }
                }
              }
            }

          }

          /// <summary>
          ///  加入房间
          /// </summary>
          public sealed partial class EnterRoomRequest : pb::IMessage<EnterRoomRequest> {
            private static readonly pb::MessageParser<EnterRoomRequest> _parser = new pb::MessageParser<EnterRoomRequest>(() => new EnterRoomRequest());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<EnterRoomRequest> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Protos.Internal.Types.Hall.Descriptor.NestedTypes[3]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public EnterRoomRequest() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public EnterRoomRequest(EnterRoomRequest other) : this() {
              id_ = other.id_;
              password_ = other.password_;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public EnterRoomRequest Clone() {
              return new EnterRoomRequest(this);
            }

            /// <summary>Field number for the "Id" field.</summary>
            public const int IdFieldNumber = 1;
            private ulong id_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ulong Id {
              get { return id_; }
              set {
                id_ = value;
              }
            }

            /// <summary>Field number for the "Password" field.</summary>
            public const int PasswordFieldNumber = 2;
            private string password_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Password {
              get { return password_; }
              set {
                password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as EnterRoomRequest);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(EnterRoomRequest other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Id != other.Id) return false;
              if (Password != other.Password) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Id != 0UL) hash ^= Id.GetHashCode();
              if (Password.Length != 0) hash ^= Password.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Id != 0UL) {
                output.WriteRawTag(8);
                output.WriteUInt64(Id);
              }
              if (Password.Length != 0) {
                output.WriteRawTag(18);
                output.WriteString(Password);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Id != 0UL) {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
              }
              if (Password.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(EnterRoomRequest other) {
              if (other == null) {
                return;
              }
              if (other.Id != 0UL) {
                Id = other.Id;
              }
              if (other.Password.Length != 0) {
                Password = other.Password;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    Id = input.ReadUInt64();
                    break;
                  }
                  case 18: {
                    Password = input.ReadString();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      /// <summary>
      ///  对战消息
      /// </summary>
      public sealed partial class Duel : pb::IMessage<Duel> {
        private static readonly pb::MessageParser<Duel> _parser = new pb::MessageParser<Duel>(() => new Duel());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Duel> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Protos.Internal.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Duel() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Duel(Duel other) : this() {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Duel Clone() {
          return new Duel(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Duel);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Duel other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Duel other) {
          if (other == null) {
            return;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Duel message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          ///  传输数据
          /// </summary>
          public sealed partial class DataTransfer : pb::IMessage<DataTransfer> {
            private static readonly pb::MessageParser<DataTransfer> _parser = new pb::MessageParser<DataTransfer>(() => new DataTransfer());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<DataTransfer> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Protos.Internal.Types.Duel.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public DataTransfer() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public DataTransfer(DataTransfer other) : this() {
              data_ = other.data_;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public DataTransfer Clone() {
              return new DataTransfer(this);
            }

            /// <summary>Field number for the "Data" field.</summary>
            public const int DataFieldNumber = 1;
            private pb::ByteString data_ = pb::ByteString.Empty;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pb::ByteString Data {
              get { return data_; }
              set {
                data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as DataTransfer);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(DataTransfer other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Data != other.Data) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Data.Length != 0) hash ^= Data.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Data.Length != 0) {
                output.WriteRawTag(10);
                output.WriteBytes(Data);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Data.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(DataTransfer other) {
              if (other == null) {
                return;
              }
              if (other.Data.Length != 0) {
                Data = other.Data;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 10: {
                    Data = input.ReadBytes();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      /// <summary>
      ///  聊天消息
      /// </summary>
      public sealed partial class Chat : pb::IMessage<Chat> {
        private static readonly pb::MessageParser<Chat> _parser = new pb::MessageParser<Chat>(() => new Chat());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Chat> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Protos.Internal.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Chat() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Chat(Chat other) : this() {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Chat Clone() {
          return new Chat(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Chat);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Chat other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Chat other) {
          if (other == null) {
            return;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Chat message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          ///  大厅聊天
          /// </summary>
          public sealed partial class HallRequest : pb::IMessage<HallRequest> {
            private static readonly pb::MessageParser<HallRequest> _parser = new pb::MessageParser<HallRequest>(() => new HallRequest());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<HallRequest> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Protos.Internal.Types.Chat.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public HallRequest() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public HallRequest(HallRequest other) : this() {
              account_ = other.account_;
              content_ = other.content_;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public HallRequest Clone() {
              return new HallRequest(this);
            }

            /// <summary>Field number for the "Account" field.</summary>
            public const int AccountFieldNumber = 1;
            private string account_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Account {
              get { return account_; }
              set {
                account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "Content" field.</summary>
            public const int ContentFieldNumber = 2;
            private string content_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Content {
              get { return content_; }
              set {
                content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as HallRequest);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(HallRequest other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Account != other.Account) return false;
              if (Content != other.Content) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Account.Length != 0) hash ^= Account.GetHashCode();
              if (Content.Length != 0) hash ^= Content.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Account.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(Account);
              }
              if (Content.Length != 0) {
                output.WriteRawTag(18);
                output.WriteString(Content);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Account.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
              }
              if (Content.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(HallRequest other) {
              if (other == null) {
                return;
              }
              if (other.Account.Length != 0) {
                Account = other.Account;
              }
              if (other.Content.Length != 0) {
                Content = other.Content;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 10: {
                    Account = input.ReadString();
                    break;
                  }
                  case 18: {
                    Content = input.ReadString();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
